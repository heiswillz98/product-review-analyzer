name: Push Docker Images to ECR and Deploy Helm to EKS

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'ml-service/**'
      - 'backend/**'
      - 'frontend/**'
      - 'infra/k8s/charts/**'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
  REPO_PREFIX: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  EKS_CLUSTER_NAME: product-review-cluster
  HELM_RELEASE_NAME: product-review
  K8S_NAMESPACE: product-review
  BACKEND_SERVICE_NAME: backend
  FRONTEND_SERVICE_NAME: frontend
  ML_SERVICE_NAME: ml-service

jobs:
  push-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      ml_changes: ${{ steps.check-ml-changes.outputs.changes_detected }}
      backend_changes: ${{ steps.check-backend-changes.outputs.changes_detected }}
      frontend_changes: ${{ steps.check-frontend-changes.outputs.changes_detected }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed for git diff

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔑 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🛠 Set version
        id: set-version
        run: |
          VERSION="v1.0.3-$(echo ${GITHUB_SHA} | cut -c 1-7)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🛠 Check for changes in ML Service
        id: check-ml-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^ml-service/'; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Build and Push ML Service
        if: steps.check-ml-changes.outputs.changes_detected == 'true'
        run: |
          docker build -t ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }} ./ml-service
          docker push ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }}

      - name: 🛠 Check for changes in Backend
        id: check-backend-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^backend/'; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Build and Push Backend
        if: steps.check-backend-changes.outputs.changes_detected == 'true'
        run: |
          docker build -t ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }} ./backend
          docker push ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }}

      - name: 🛠 Check for changes in Frontend
        id: check-frontend-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^frontend/'; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Build and Push Frontend
        if: steps.check-frontend-changes.outputs.changes_detected == 'true'
        run: |
          docker build \
            --build-arg VITE_API_URL=http://placeholder \
            -t ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }} ./frontend
          docker push ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }}

  deploy-helm:
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔄 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: 🛠 Create Namespace
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 🚀 Deploy ML Service Helm Chart
        if: needs.push-to-ecr.outputs.ml_changes == 'true'
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-ml ./infra/k8s/charts/ml-service \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set image.repository=${{ env.REPO_PREFIX }}/product-review-ml-service \
            --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set image.pullPolicy=Always

      - name: 🚀 Deploy Backend Helm Chart
        if: needs.push-to-ecr.outputs.backend_changes == 'true'
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-backend ./infra/k8s/charts/backend \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set image.repository=${{ env.REPO_PREFIX }}/product-review-backend \
            --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set image.pullPolicy=Always

      - name: 🌐 Get Backend Load Balancer Address
        id: get-backend-lb
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            LB_HOSTNAME=$(kubectl get svc -n ${{ env.K8S_NAMESPACE }} ${{ env.BACKEND_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "")
            if [ -n "$LB_HOSTNAME" ]; then
              echo "Backend load balancer hostname found: $LB_HOSTNAME"
              echo "backend_lb_hostname=http://${LB_HOSTNAME}:5001" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $ATTEMPT: Backend load balancer hostname not found. Retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done
          echo "Error: Could not retrieve backend load balancer hostname after $MAX_ATTEMPTS attempts."
          kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide
          kubectl describe svc -n ${{ env.K8S_NAMESPACE }} ${{ env.BACKEND_SERVICE_NAME }}
          exit 1

      - name: 🚀 Deploy Frontend Helm Chart
        if: needs.push-to-ecr.outputs.frontend_changes == 'true'
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-frontend ./infra/k8s/charts/frontend \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set image.repository=${{ env.REPO_PREFIX }}/product-review-frontend \
            --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set image.pullPolicy=Always \
            --set env.VITE_API_URL=${{ steps.get-backend-lb.outputs.backend_lb_hostname }}

      - name: 🌐 Get Frontend Load Balancer Address
        id: get-frontend-lb
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            LB_HOSTNAME=$(kubectl get svc -n ${{ env.K8S_NAMESPACE }} ${{ env.FRONTEND_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "")
            if [ -n "$LB_HOSTNAME" ]; then
              echo "Frontend load balancer hostname found: $LB_HOSTNAME"
              echo "frontend_lb_hostname=http://${LB_HOSTNAME}:80" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $ATTEMPT: Frontend load balancer hostname not found. Retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done
          echo "Warning: Could not retrieve frontend load balancer hostname after $MAX_ATTEMPTS attempts."
          kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide
          kubectl describe svc -n ${{ env.K8S_NAMESPACE }} ${{ env.FRONTEND_SERVICE_NAME }}
          exit 0

      - name: 📋 Log Frontend and Backend Service Details
        run: |
          echo "Fetching service details for namespace ${{ env.K8S_NAMESPACE }}"
          kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide












# name: Push Docker Images to ECR and Deploy Helm to EKS

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: ${{ secrets.AWS_REGION }}
#   ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
#   REPO_PREFIX: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
#   EKS_CLUSTER_NAME: product-review-cluster
#   HELM_RELEASE_NAME: product-review
#   K8S_NAMESPACE: product-review
#   BACKEND_SERVICE_NAME: backend
#   FRONTEND_SERVICE_NAME: frontend

# jobs:
#   push-to-ecr:
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.set-version.outputs.version }}
#     steps:
#       - name: 📥 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔐 Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: ${{ env.AWS_REGION }}
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: 🔑 Login to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: 🛠 Set version
#         id: set-version
#         run: |
#           VERSION="v1.0.3-$(echo ${GITHUB_SHA} | cut -c 1-7)"
#           echo "version=$VERSION" >> $GITHUB_OUTPUT

#       - name: 🐳 Build and Push ML Service
#         run: |
#           docker build -t ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }} ./ml-service
#           docker push ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }}

#       - name: 🐳 Build and Push Backend
#         run: |
#           docker build -t ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }} ./backend
#           docker push ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }}

#       - name: 🐳 Build and Push Frontend
#         run: |
#           docker build \
#             --build-arg VITE_API_URL=http://placeholder \
#             -t ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }} ./frontend
#           docker push ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }}

#   deploy-helm:
#     runs-on: ubuntu-latest
#     needs: push-to-ecr
#     steps:
#       - name: 📥 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔐 Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: ${{ env.AWS_REGION }}
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: 🔄 Update kubeconfig
#         run: |
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

#       - name: 🛠 Create Namespace
#         run: |
#           kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

#       - name: 🚀 Deploy ML Service Helm Chart
#         run: |
#           helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-ml ./infra/k8s/charts/ml-service \
#             --namespace ${{ env.K8S_NAMESPACE }} \
#             --create-namespace \
#             --set image.repository=${{ env.REPO_PREFIX }}/product-review-ml-service \
#             --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
#             --set image.pullPolicy=Always

#       - name: 🚀 Deploy Backend Helm Chart
#         run: |
#           helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-backend ./infra/k8s/charts/backend \
#             --namespace ${{ env.K8S_NAMESPACE }} \
#             --create-namespace \
#             --set image.repository=${{ env.REPO_PREFIX }}/product-review-backend \
#             --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
#             --set image.pullPolicy=Always

#       - name: 🌐 Get Backend Load Balancer Address
#         id: get-lb
#         run: |
#           MAX_ATTEMPTS=5
#           ATTEMPT=1
#           while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
#             LB_HOSTNAME=$(kubectl get svc -n ${{ env.K8S_NAMESPACE }} ${{ env.BACKEND_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "")
#             if [ -n "$LB_HOSTNAME" ]; then
#               echo "Backend load balancer hostname found: $LB_HOSTNAME"
#               echo "lb_hostname=http://${LB_HOSTNAME}:5001" >> $GITHUB_OUTPUT
#               exit 0
#             fi
#             echo "Attempt $ATTEMPT: Backend load balancer hostname not found. Retrying in 30 seconds..."
#             sleep 30
#             ATTEMPT=$((ATTEMPT + 1))
#           done
#           echo "Error: Could not retrieve backend load balancer hostname after $MAX_ATTEMPTS attempts."
#           kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide
#           kubectl describe svc -n ${{ env.K8S_NAMESPACE }} ${{ env.BACKEND_SERVICE_NAME }}
#           exit 1

#       - name: 🚀 Deploy Frontend Helm Chart
#         run: |
#           helm upgrade --install ${{ env.HELM_RELEASE_NAME }}-frontend ./infra/k8s/charts/frontend \
#             --namespace ${{ env.K8S_NAMESPACE }} \
#             --create-namespace \
#             --set image.repository=${{ env.REPO_PREFIX }}/product-review-frontend \
#             --set image.tag=${{ needs.push-to-ecr.outputs.version }} \
#             --set image.pullPolicy=Always \
#             --set env.VITE_API_URL=${{ steps.get-lb.outputs.lb_hostname }}

#       - name: 📋 Log Frontend and Backend Service Details
#         run: |
#           echo "Fetching service details for namespace ${{ env.K8S_NAMESPACE }}"
#           kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide