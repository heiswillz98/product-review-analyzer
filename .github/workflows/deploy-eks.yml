name: Push Docker Images to ECR and Deploy Helm to EKS

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
  REPO_PREFIX: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  EKS_CLUSTER_NAME: product-review-cluster
  HELM_RELEASE_NAME: product-review
  K8S_NAMESPACE: product-review
  BACKEND_SERVICE_NAME: backend 
  FRONTEND_SERVICE_NAME: frontend 

jobs:
  push-to-ecr:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔑 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🛠 Set version
        id: set-version
        run: |
          VERSION="v1.0.3-$(echo ${GITHUB_SHA} | cut -c 1-7)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🐳 Build and Push ML Service
        run: |
          docker build -t ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }} ./ml-service
          docker push ${{ env.REPO_PREFIX }}/product-review-ml-service:${{ steps.set-version.outputs.version }}

      - name: 🐳 Build and Push Backend
        run: |
          docker build -t ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }} ./backend
          docker push ${{ env.REPO_PREFIX }}/product-review-backend:${{ steps.set-version.outputs.version }}

      - name: 🐳 Build and Push Frontend
        run: |
          docker build \
            --build-arg VITE_API_URL=http://placeholder \
            -t ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }} ./frontend
          docker push ${{ env.REPO_PREFIX }}/product-review-frontend:${{ steps.set-version.outputs.version }}

  deploy-helm:
    runs-on: ubuntu-latest
    needs: push-to-ecr
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔄 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: 🌐 Get Backend Load Balancer Address
        id: get-lb
        run: |
          LB_HOSTNAME=$(kubectl get svc -n ${{ env.K8S_NAMESPACE }} ${{ env.BACKEND_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "")
          if [ -z "$LB_HOSTNAME" ]; then
            echo "Error: Could not retrieve backend load balancer hostname. Ensure the service exists and has an ingress."
            exit 1
          fi
          echo "lb_hostname=http://${LB_HOSTNAME}:5001" >> $GITHUB_OUTPUT

      - name: 🛠 Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.12.0'

      - name: 🚀 Deploy Helm Chart
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./helm \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set mlService.image.repository=${{ env.REPO_PREFIX }}/product-review-ml-service \
            --set mlService.image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set mlService.image.pullPolicy=Always \
            --set backend.image.repository=${{ env.REPO_PREFIX }}/product-review-backend \
            --set backend.image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set backend.image.pullPolicy=Always \
            --set frontend.image.repository=${{ env.REPO_PREFIX }}/product-review-frontend \
            --set frontend.image.tag=${{ needs.push-to-ecr.outputs.version }} \
            --set frontend.image.pullPolicy=Always \
            --set frontend.env.VITE_API_URL=${{ steps.get-lb.outputs.lb_hostname }}

      - name: 📋 Log Frontend and Backend Service Details
        run: |
          echo "Fetching service details for namespace ${{ env.K8S_NAMESPACE }}"
          kubectl get svc -n ${{ env.K8S_NAMESPACE }} -o wide